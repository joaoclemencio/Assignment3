html <- getURL('http://annie.mis.fedex.com/Login.aspx', curl = curl)
html
viewstate <- as.character(sub('.*id="__VIEWSTATE" value="([0-9a-zA-Z+/=]*).*', '\\1', html))
eventvalidation <- as.character(sub('.*id="__EVENTVALIDATION" value="([0-9a-zA-Z+/=]*).*', '\\1', html))
params <- list(
'txtEmpNum'    = '921194',
'txtPassword'    = 'G0ddamit',
'btnSubmit' = 'Log In',
'__VIEWSTATE' = viewstate,
'__EVENTVALIDATION' = eventvalidation
)
html = postForm('http://annie.mis.fedex.com/Login.aspx', .params = params, curl = curl)
html
dateRange <- seq.Date(from = as.Date('2011-03-07'), to = as.Date('2014-08-11'), by = "days")
dateCharRange <- format(dateRange, "%m/%d/%Y")
topdf <- data.frame(
"Flight"    = "1",
"Date"      = dateRange[1],
readHTMLTable(getURL("http://annie.mis.fedex.com/Fleet/Main/FDR.aspx?Flight=0001&ZDate=8/9/2011&Orig=STN&Dest=MEM&Leg=1", curl = curl))$grdFDR
)
topdf <- topdf[-(1:nrow(topdf)),]
for(day in dateCharRange){
turl <- paste0("http://annie.mis.fedex.com/Fleet/Main/FDR.aspx?Flight=0001&ZDate=", day, "&Orig=STN&Dest=MEM&Leg=1")
tdt <- readHTMLTable(getURL(turl, curl = curl))$grdFDR
if(class(tdt)!="NULL"){
tdt <- data.frame(
"Flight"    = "0001",
"Date"      = as.Date(day, format="%m/%d/%Y"),
tdt
)
topdf <- rbind(topdf, tdt)
}
}
write.csv(topdf, "FX0001fdr.csv")
summary(topdf)
cube <- function(x, n) {
x^3
}
cube(3)
install.packages("RMySQL", type = "source")
library(RCurl)
library(httr)
library(XML)
curl = getCurlHandle()
curlSetOpt(cookiejar = 'cookies.txt', followlocation = TRUE, autoreferer = TRUE, curl = curl)
html <- getURL('https://sso.secure.fedex.com/wsso/login.html', curl = curl)
set_config(use_proxy("http://proxy.emea.fedex.com", port = 3128))
curl = getCurlHandle()
curlSetOpt(cookiejar = 'cookies.txt', followlocation = TRUE, autoreferer = TRUE, curl = curl)
html <- getURL('https://sso.secure.fedex.com/wsso/login.html', curl = curl)
curl-config
curl-config --feature
html <- getURL('https://sso.secure.fedex.com/wsso/login.html', curl = curl, ssl.verifypeer = FALSE)
html
params <- list(
'login'    = '921194',
'password'    = 'G0ddamit',
'submit' = 'Submit'
#,
#    '__VIEWSTATE' = viewstate,
#    '__EVENTVALIDATION' = eventvalidation
)
html <- getURL('http://famis.ebs.fedex.com/fwr/reports/GNP/ST/FlightDetailRpt1.cfm?Month=AUG14&InOut=OB&Time=Local&Mon=yes&Tue=yes&Wed=yes&Thu=yes&Fri=yes&Sat=yes&Sun=yes&Location=STN', curl = curl, ssl.verifypeer = FALSE)
html
params <- list(
'login'    = '921194',
'password'    = 'G0ddamit',
'submit' = 'Submit'
#,
#    '__VIEWSTATE' = viewstate,
#    '__EVENTVALIDATION' = eventvalidation
)
html = postForm('https://sso.secure.fedex.com/wsso/login.html', .params = params, curl = curl, ssl.verifypeer = FALSE)
html <- getURL('http://famis.ebs.fedex.com/fwr/reports/GNP/ST/FlightDetailRpt1.cfm?Month=AUG14&InOut=OB&Time=Local&Mon=yes&Tue=yes&Wed=yes&Thu=yes&Fri=yes&Sat=yes&Sun=yes&Location=STN', curl = curl, ssl.verifypeer = FALSE)
html
html = postForm('https://sso.secure.fedex.com/wsso/login.html', .params = params, curl = curl)
html = postForm('https://sso.secure.fedex.com/wsso/login.html', .params = params, curl = curl)
params <- list(
'login'    = '921194',
'password'    = 'G0ddamit'
#,
#'submit' = 'Submit'
#,
#    '__VIEWSTATE' = viewstate,
#    '__EVENTVALIDATION' = eventvalidation
)
html = postForm('https://sso.secure.fedex.com/wsso/protected/cgi-bin/LoginFormHandler.cgi', .params = params, curl = curl)
html
html <- getURL('http://famis.ebs.fedex.com/fwr/reports/GNP/ST/FlightDetailRpt1.cfm?Month=AUG14&InOut=OB&Time=Local&Mon=yes&Tue=yes&Wed=yes&Thu=yes&Fri=yes&Sat=yes&Sun=yes&Location=STN', curl = curl, ssl.verifypeer = FALSE)
html
params <- list(
'login'    = '921194',
'password'    = 'G0ddamit'
#,
#'submit' = 'Submit'
#,
#    '__VIEWSTATE' = viewstate,
#    '__EVENTVALIDATION' = eventvalidation
)
html = postForm('https://sso.secure.fedex.com/wsso/protected/cgi-bin/LoginFormHandler.cgi', .params = params, curl = curl)
params <- list(
'login'    = '921194',
'password'    = 'G0ddamit'
#,
#'submit' = 'Submit'
#,
#    '__VIEWSTATE' = viewstate,
#    '__EVENTVALIDATION' = eventvalidation
)
html = postForm('https://sso.secure.fedex.com/wsso/protected/cgi-bin/LoginFormHandler.cgi', login = '921194', password = 'G0ddamit', curl = curl)
html = postForm('https://sso.secure.fedex.com/wsso/protected/cgi-bin/LoginFormHandler.cgi', login = '921194', password = 'G0ddamit', curl = curl)
html = postForm('https://sso.secure.fedex.com/wsso/protected/cgi-bin/LoginFormHandler.cgi', 'login' = '921194', 'password' = 'G0ddamit', curl = curl)
html = postForm('https://sso.secure.fedex.com/wsso/protected/cgi-bin/LoginFormHandler.cgi', .params('login' = '921194', 'password' = 'G0ddamit'), curl = curl)
html = postForm('https://sso.secure.fedex.com/wsso/protected/cgi-bin/LoginFormHandler.cgi', .params = list('login' = '921194', 'password' = 'G0ddamit'), curl = curl)
html
?writeLines()
writeLines(html, "test.html")
library(RCurl)
library(httr)
library(XML)
set_config(use_proxy("http://proxy.emea.fedex.com", port = 3128))
curl = getCurlHandle()
curlSetOpt(cookiejar = 'cookies.txt', followlocation = TRUE, autoreferer = TRUE, curl = curl)
html <- getURL('https://sso.secure.fedex.com/wsso/login.html', curl = curl, ssl.verifypeer = FALSE)
html
htmlp = htmlTreeParse(html)
htmlp
con = url("https://sso.secure.fedex.com/wsso/protected/cgi-bin/LoginFormHandler.cgi")
con
urlhandle = handle("https://sso.secure.fedex.com/wsso/protected/cgi-bin/LoginFormHandler.cgi")
urlhandle
con
url = "https://sso.secure.fedex.com/wsso/protected/cgi-bin/LoginFormHandler.cgi"
params <- list(
'login'    = '921194',
'password'    = 'G0ddamit'
'submit' = 'Submit'
#,
#'submit' = 'Submit'
#,
#    '__VIEWSTATE' = viewstate,
#    '__EVENTVALIDATION' = eventvalidation
)
params <- list(
'login'    = '921194',
'password'    = 'G0ddamit',
'submit' = 'Submit'
#,
#'submit' = 'Submit'
#,
#    '__VIEWSTATE' = viewstate,
#    '__EVENTVALIDATION' = eventvalidation
)
params
postForm(uri = url, .params = params, )
curl
class(curl)
unnclass(curl)
unclass(curl)
unclass(unclass(curl))
getCurlOptionsConstants()
class(getCurlOptionsConstants())
getCurlOptionsConstants()[1]
as.data.frame(getCurlOptionsConstants())
row.names(as.data.frame(getCurlOptionsConstants()))
postForm(uri = url, .params = params)
postForm(uri = url, .params = params, curl = curl)
postt = postForm(uri = url, .params = params, curl = curl)
htmlTreeParse(postt)
postt = postForm(uri = url, .params = params, curl = curl)
params <- list(
'login'    = '921194',
'password'    = 'G0ddamit')
postt = postForm(uri = url, .params = params, curl = curl)
curl
curlOptions(curl)
curlOptions()
class(curl)
curlOptions(password)
getCurlOptionTypes
getCurlOptionTypes()
getCurlOptionTypes(password)
getCurlOptionTypes("password")
getCurlOptionTypes()["password"]
getCurlOptionsConstants()["password"]
getCurlOptionsConstants()["login"]
getCurlOptionsConstants()["username"]
getCurlInfo()
getCurlInfoConstants
getCurlInfoConstants()
postt = postForm(uri = url, .params = params, curl = curl, .opts = list("password" = "G0ddamit"))
postt
htmlTreeParse(postt)
t = readHTMLTable(getURL("http://annie.mis.fedex.com/Fleet/Main/FDR.aspx?Flight=0001&ZDate=8/9/2011&Orig=STN&Dest=MEM&Leg=1", curl = curl))
t
t = readHTMLTable(getURL("http://famis.ebs.fedex.com/fwr/menus/menu-263-a.cfm?fav=0", curl = curl))
t
t = getURL("http://famis.ebs.fedex.com/fwr/menus/menu-263-a.cfm?fav=0", curl = curl)
t
con2 = url("http://famis.ebs.fedex.com/fwr/menus/menu-263-a.cfm?fav=0")
con2
getCurlOptionsConstants()
curl
getCurlOptions()
getCurlInfo()
getCurlInfo(curl)
listCurlOptions()
curlSetOpt(referer = https://sso.secure.fedex.com/wsso/login.html)
curlSetOpt(referer = "https://sso.secure.fedex.com/wsso/login.html")
curlSetOpt(referer = "https://sso.secure.fedex.com/wsso/login.html", curl = curl)
getCurlInfo(curl)
getCurlInfo(curl)$referer
curlSetOpt("referer" = "https://sso.secure.fedex.com/wsso/login.html", curl = curl)
getCurlInfo(curl)
curlSetOpt(referer = "https://sso.secure.fedex.com/wsso/login.html", autoreferer = F, curl = curl)
curlSetOpt(referer = "https://sso.secure.fedex.com/wsso/login.html", autoreferer = F, cookiejar = 'cookies.txt', followlocation = T, , curl = curl)
curlSetOpt(referer = "https://sso.secure.fedex.com/wsso/login.html", autoreferer = F, cookiejar = 'cookies.txt', followlocation = T, curl = curl)
curl
curlSetOpt(referer = "https://sso.secure.fedex.com/wsso/login.html", autoreferer = F, cookiejar = 'cookies.txt', followlocation = T, url = "https://sso.secure.fedex.com/wsso/protected/cgi-bin/LoginFormHandler.cgi", curl = curl)
params <- list(
'login'    = '921194',
'password'    = 'G0ddamit')
postForm(uri = url, .params = params, curl = curl)
library(rcom)
install.packages("rcom")
eventvalidation <- as.character(sub('.*id="__EVENTVALIDATION" value="([0-9a-zA-Z+/=]*).*', '\\1', html))
source('~/annie2.R')
source('~/.active-rstudio-document')
library(curl)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
head(topdf)
str(topdf)
source('~/annie2.R')
setInternet2(TRUE)
Sys.setenv(http_proxy="http://proxy.emea.fedex.com:3128")
library(XML)
gurl <- getURL("https://maps.googleapis.com/maps/api/geocode/xml?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA")
gurl <- getURL("http://maps.googleapis.com/maps/api/geocode/xml?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA")
gxml <- xmlTreeParse(gurl)
gxml
xpathApply(gxml, "location")
ggxml <- xmlParse(gurl)
ggxml
xpathApply(ggxml, "location")
xpathApply(ggxml, "location")[1]
xpathApply(ggxml, "location")[[1]
]
xpathApply(ggxml, "location")[[1]]
getNodeSet(ggxml, "//geometry/location")
getNodeSet(ggxml, "//geometry/location")[[1]]
getNodeSet(ggxml, "//geometry/location")[[1]][[1]]
xmlValue(getNodeSet(ggxml, "//geometry/location")[[1]][[1]])
as.numeric(xmlValue(getNodeSet(ggxml, "//geometry/location")[[1]][[1]]))
as.numeric(xmlValue(getNodeSet(ggxml, "//geometry/location/lat")[[1]][[1]]))
as.numeric(xmlValue(getNodeSet(ggxml, "//geometry/location/lon")[[1]][[1]]))
as.numeric(xmlValue(getNodeSet(ggxml, "//geometry/location/lng")[[1]][[1]]))
?data.frame
gmaps.coord <- function(postcode){
setInternet2(TRUE)
Sys.setenv(http_proxy="http://proxy.emea.fedex.com:3128")
if (!require(XML)){
install.packages("XML")
library(XML)
}
if(!require(RCurl)){
install.packages("RCurl")
library(RCurl)
}
gurl <- paste0("http://maps.googleapis.com/maps/api/distancematrix/xml?", postcode, "+UK")
xContent <- getURL(gurl)
xParsed <- xmlParse(xContent)
lat <- as.numeric(xmlValue(getNodeSet(xParsed, "//geometry/location/lat")[[1]][[1]]))
lng <- as.numeric(xmlValue(getNodeSet(xParsed, "//geometry/location/lng")[[1]][[1]]))
latlong <- data.frame(lat, lng)
}
gmaps.coord("E152JS")
postcode <- "E152JS"
gurl <- paste0("http://maps.googleapis.com/maps/api/distancematrix/xml?", postcode, "+UK")
gurl
xContent <- getURL(gurl)
xContent
xParsed <- xmlParse(xContent)
xParsed
gmaps.coord <- function(postcode){
setInternet2(TRUE)
Sys.setenv(http_proxy="http://proxy.emea.fedex.com:3128")
if (!require(XML)){
install.packages("XML")
library(XML)
}
if(!require(RCurl)){
install.packages("RCurl")
library(RCurl)
}
gurl <- paste0("http://maps.googleapis.com/maps/api/distancematrix/xml?address=", postcode, "+UK")
xContent <- getURL(gurl)
xParsed <- xmlParse(xContent)
lat <- as.numeric(xmlValue(getNodeSet(xParsed, "//geometry/location/lat")[[1]][[1]]))
lng <- as.numeric(xmlValue(getNodeSet(xParsed, "//geometry/location/lng")[[1]][[1]]))
latlong <- data.frame(lat, lng)
}
gmaps.coord("E152JS")
gurl <- paste0("http://maps.googleapis.com/maps/api/distancematrix/xml?address=", postcode, "+UK")
gurl
gmaps.coord <- function(postcode){
setInternet2(TRUE)
Sys.setenv(http_proxy="http://proxy.emea.fedex.com:3128")
if (!require(XML)){
install.packages("XML")
library(XML)
}
if(!require(RCurl)){
install.packages("RCurl")
library(RCurl)
}
gurl <- paste0("http://maps.googleapis.com/maps/api/geocode/xml?address=", postcode, "+UK")
xContent <- getURL(gurl)
xParsed <- xmlParse(xContent)
lat <- as.numeric(xmlValue(getNodeSet(xParsed, "//geometry/location/lat")[[1]][[1]]))
lng <- as.numeric(xmlValue(getNodeSet(xParsed, "//geometry/location/lng")[[1]][[1]]))
latlong <- data.frame(lat, lng)
}
gmaps.coord("E152JS")
gmaps.coord <- function(postcode){
setInternet2(TRUE)
Sys.setenv(http_proxy="http://proxy.emea.fedex.com:3128")
if (!require(XML)){
install.packages("XML")
library(XML)
}
if(!require(RCurl)){
install.packages("RCurl")
library(RCurl)
}
gurl <- paste0("http://maps.googleapis.com/maps/api/geocode/xml?address=", postcode, "+UK")
xContent <- getURL(gurl)
xParsed <- xmlParse(xContent)
lat <- as.numeric(xmlValue(getNodeSet(xParsed, "//geometry/location/lat")[[1]][[1]]))
lng <- as.numeric(xmlValue(getNodeSet(xParsed, "//geometry/location/lng")[[1]][[1]]))
latlong <- data.frame(lat, lng)
return(latlong)
}
gmaps.coord("E152JS")
gmaps.coord <- function(postcode){
setInternet2(TRUE)
Sys.setenv(http_proxy="http://proxy.emea.fedex.com:3128")
if (!require(XML)){
install.packages("XML")
library(XML)
}
if(!require(RCurl)){
install.packages("RCurl")
library(RCurl)
}
gurl <- paste0("http://maps.googleapis.com/maps/api/geocode/xml?address=", postcode, "+UK")
xContent <- getURL(gurl)
xParsed <- xmlParse(xContent)
lat <- as.numeric(xmlValue(getNodeSet(xParsed, "//geometry/location/lat")[[1]][[1]]))
lng <- as.numeric(xmlValue(getNodeSet(xParsed, "//geometry/location/lng")[[1]][[1]]))
latlong <- data.frame(postcode, lat, lng)
return(latlong)
}
gmaps.coord("E152JS")
gmaps.coord <- function(postcode){
setInternet2(TRUE)
Sys.setenv(http_proxy="http://proxy.emea.fedex.com:3128")
if (!require(XML)){
install.packages("XML")
library(XML)
}
if(!require(RCurl)){
install.packages("RCurl")
library(RCurl)
}
postcode <- gsub(" ", "", postcode)
gurl <- paste0("http://maps.googleapis.com/maps/api/geocode/xml?address=", postcode, "+UK")
xContent <- getURL(gurl)
xParsed <- xmlParse(xContent)
lat <- as.numeric(xmlValue(getNodeSet(xParsed, "//geometry/location/lat")[[1]][[1]]))
lng <- as.numeric(xmlValue(getNodeSet(xParsed, "//geometry/location/lng")[[1]][[1]]))
latlong <- data.frame(postcode, lat, lng)
return(latlong)
}
gmaps.coord("E152JS")
gmaps.coord("E15 2JS")
is.data.frame(latlong)
!is.data.frame(latlong)
exists(latlong)
latlong
?exists
exists("latlong")
source('~/gmaps.coord.R')
source('~/gmaps.coord.R')
coords <- c("E152JS", "E1 2EE", "CM232HE")
gmaps.coord.multiple(coords)
source('~/gmaps.coord.R')
gmaps.coord.multiple(coords)
coords <- c("E152JS", "E1 2EE", "CM232he")
gmaps.coord.multiple(coords)
source('~/GitHub/Assignment3/rankhospital.R')
get(wd)
getwd()
setwd("~/GitHub/Assignment3")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
outcome.data <- read.csv("outcome-of-care-measures.csv", na.strings = c("", "Not Available"))
outcome.data$Address.2 <- NULL
outcome.data$Address.3 <- NULL
outcome.mortality <- outcome.data[,1:26]
outcome.readmission <- outcome.data[,c(1:8, 27:44)]
outcome.mortality$Type <- factor("Mortality")
outcome.readmission$Type <- factor("Readmission")
names(outcome.mortality) <- gsub("Mortality..", "", names(outcome.mortality))
names(outcome.readmission) <- names(outcome.mortality)
outcome.data <- rbind(outcome.mortality, outcome.readmission)
rm(outcome.mortality, outcome.readmission)
outcome.heart.attack <- outcome.data[,c(1:14, 27)]
outcome.heart.attack$Outcome <- factor("heart attack")
outcome.heart.failure <- outcome.data[,c(1:8, 15:20, 27)]
outcome.heart.failure$Outcome <- factor("heart failure")
outcome.pneumonia <- outcome.data[,c(1:8, 21:27)]
outcome.pneumonia$Outcome <- factor("pneumonia")
names(outcome.heart.attack) <- gsub("..from.Heart.Attack", "", names(outcome.heart.attack))
names(outcome.heart.failure) <- names(outcome.heart.attack)
names(outcome.pneumonia) <- names(outcome.heart.attack)
outcome.data <- rbind(outcome.heart.attack, outcome.heart.failure, outcome.pneumonia)
rm(outcome.heart.attack, outcome.heart.failure, outcome.pneumonia)
aggregate(outcome.data, outcome.data$State, min)
aggregate.data.frame(outcome.data, outcome.data$State, min)
aggregate.data.frame(x = outcome.data, by = outcome.data$State, min)
class(2)
class(outcome.data$State)
as.list(outcome.data$State)
aggregate.data.frame(x = outcome.data, by = levels(outcome.data$State), min)
aggregate.data.frame(x = outcome.data, by = as.list(outcome.data$State), min)
?aggregate
by(outcome.data, outcome.data$State, min)
?by
source('~/.active-rstudio-document')
rankall("heart attack")
outcome.data <- read.csv("outcome-of-care-measures.csv", na.strings = c("", "Not Available"))
outcome.data$Address.2 <- NULL
outcome.data$Address.3 <- NULL
outcome.mortality <- outcome.data[,1:26]
outcome.readmission <- outcome.data[,c(1:8, 27:44)]
outcome.mortality$Type <- factor("Mortality")
outcome.readmission$Type <- factor("Readmission")
names(outcome.mortality) <- gsub("Mortality..", "", names(outcome.mortality))
names(outcome.readmission) <- names(outcome.mortality)
outcome.data <- rbind(outcome.mortality, outcome.readmission)
rm(outcome.mortality, outcome.readmission)
outcome.heart.attack <- outcome.data[,c(1:14, 27)]
outcome.heart.attack$Outcome <- factor("heart attack")
outcome.heart.failure <- outcome.data[,c(1:8, 15:20, 27)]
outcome.heart.failure$Outcome <- factor("heart failure")
outcome.pneumonia <- outcome.data[,c(1:8, 21:27)]
outcome.pneumonia$Outcome <- factor("pneumonia")
names(outcome.heart.attack) <- gsub("..from.Heart.Attack", "", names(outcome.heart.attack))
names(outcome.heart.failure) <- names(outcome.heart.attack)
names(outcome.pneumonia) <- names(outcome.heart.attack)
outcome.data <- rbind(outcome.heart.attack, outcome.heart.failure, outcome.pneumonia)
rm(outcome.heart.attack, outcome.heart.failure, outcome.pneumonia)
outcome = "heart attack"
if (!(outcome %in% outcome.data$Outcome)) {
stop('invalid outcome')
}
outcome.output <- by(outcome.data, outcome.data$State, rankhospital, outcome, num)
outcome.output <- by(outcome.data, outcome.data$State, rankhospital, outcome, num)
q
c
c
outcome.output <- by(outcome.data, outcome.data$State, rankhospital, outcome, num)
?aggregate
?tapply
outcome.output <- tapply(outcome.data$State, outcome.data$State, rankhospital, outcome, num)
c()
outcome.output <- tapply(outcome.data$State, outcome.data$State, rankhospital, outcome, num)
outcome.output <- tapply(outcome.data, outcome.data$State, rankhospital, outcome, num)
outcome.output <- by(outcome.data, outcome.data$State, rankhospital, outcome, num)
outcome.mortality <- subset(outcome.data, Type=="Mortality")
rank.from.df <- function(outcome.mortality.by.state, outcome, num = "best"){
outcome.mortality.by.state <- outcome.mortality.by.state[order(
outcome.mortality.by.state$Hospital.30.Day.Death..Rate,
outcome.mortality.by.state$Hospital.Name,
na.last = NA
),]
if(num == "best"){
num <- 1
} else if (num == "worst") {
num <- nrows(outcome.mortality.by.state)
}
return(outcome.mortality.by.state[num,])
}
outcome.output <- by(outcome.mortality, outcome.mortality$State, rank.from.df, outcome, num)
num = "best"
outcome.output <- by(outcome.mortality, outcome.mortality$State, rank.from.df, outcome, num)
outcome.output
rm(outcome.output)
?by
source('~/GitHub/Assignment3/rankall.R')
rankall("heart attack")
source('~/GitHub/Assignment3/rankall.R')
rankall("heart attack")
